comparison_operator ----> == | != | <= | >= | > | <
assignment_operator ----> = | += | -= | *= | **= | %= | /=
binary_operator -----> + | - | / | * | ** | % | comparison_operator | logical_operator
unary_operator -----> ! | - | ++ | -- | not
logical_operator ----> and | or | not

comments_prefix ----> //

keywords ----> let | if | else | switch | case | default | for | while | do | break | continue | in | instanceof | fn | true | false
                    | null | return | types | logical_operator
type -----> array | object | void | literal
literal ----> number | string | boolean
number -------------------> [0-9]+(\.[0-9]+)?
string -------------------> ".*?" | '.*?'
identifiers --------------> [a-zA-Z_][a-zA-Z0-9_]*


statement       → identifier assignment_operator expression
expression      → logical
logical         → comparison ( (and | or) comparison )*
comparison      → additive (comparison_operator additive)*
additive        → multiplicative ( ( + | - ) multiplicative )*
multiplicative  → power ( ( * | / | % ) power )*
power           → unary ( ** unary )*
unary           → (unary_operator)? primary
primary         → identifier | literal | "(" expression ")"
