Here's a practical list of **commands** your algorithm visualizer will likely need. These are the **"instructions"** your algorithms yield, and your `Scene`/engine interprets them to render animations or update visuals.

---

## ðŸŽ¯ Core Command List

### âœ… **Node Commands**

| Command           | Purpose                                  | Example                                            |
| ----------------- | ---------------------------------------- | -------------------------------------------------- |
| `highlightNode`   | Visually highlight a node (e.g. visited) | `{ type: "highlightNode", id: "A" }`               |
| `unhighlightNode` | Remove node highlight                    | `{ type: "unhighlightNode", id: "A" }`             |
| `selectNode`      | Mark node as selected                    | `{ type: "selectNode", id: "A" }`                  |
| `deselectNode`    | Remove selection                         | `{ type: "deselectNode", id: "A" }`                |
| `moveNode`        | Move node to new position (if animated)  | `{ type: "moveNode", id: "A", x: 200, y: 150 }`    |
| `labelNode`       | Set node label/text                      | `{ type: "labelNode", id: "A", label: "Visited" }` |

---

### âœ… **Edge Commands**

| Command           | Purpose               | Example                                                 |
| ----------------- | --------------------- | ------------------------------------------------------- |
| `highlightEdge`   | Highlight an edge     | `{ type: "highlightEdge", from: "A", to: "B" }`         |
| `unhighlightEdge` | Remove edge highlight | `{ type: "unhighlightEdge", from: "A", to: "B" }`       |
| `labelEdge`       | Set edge label/text   | `{ type: "labelEdge", from: "A", to: "B", label: "3" }` |

---

### âœ… **Animation / Timing**

| Command     | Purpose                  | Example                           |
| ----------- | ------------------------ | --------------------------------- |
| `wait`      | Pause animation for N ms | `{ type: "wait", duration: 500 }` |
| `focusNode` | Center camera on a node  | `{ type: "focusNode", id: "A" }`  |

---

### âœ… **Global Graph Commands**

| Command           | Purpose                     | Example                           |
| ----------------- | --------------------------- | --------------------------------- |
| `clearHighlights` | Unhighlight all nodes/edges | `{ type: "clearHighlights" }`     |
| `resetGraph`      | Reset to original state     | `{ type: "resetGraph" }`          |
| `lockNode`        | Prevent dragging a node     | `{ type: "lockNode", id: "A" }`   |
| `unlockNode`      | Allow dragging a node again | `{ type: "unlockNode", id: "A" }` |

---

### âœ… Optional UX Commands (Useful for Teaching)

| Command         | Purpose                                          | Example                                                     |
| --------------- | ------------------------------------------------ | ----------------------------------------------------------- |
| `showMessage`   | Display a temporary status message               | `{ type: "showMessage", text: "Visiting A" }`               |
| `highlightPath` | Highlight a full path at once                    | `{ type: "highlightPath", path: ["A","B","C"]}`             |
| `setVariable`   | Update displayed variable (e.g. distance, stack) | `{ type: "setVariable", name: "Stack", value: ["A", "B"] }` |

---

## ðŸ’¡ How to Manage These

1. **Define all these in a single file** (like `commandTypes.js`).
2. **Create factory functions** (like `highlightNode(id)`) to enforce shape and reduce mistakes.
3. **Validate them in the Scene** before executing.

---

Would you like a base command factory module prewritten for this list?
